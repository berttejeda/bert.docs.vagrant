
- hosts: myhosts
  gather_facts: true
  become: true
  vars:
    # Default Variables
    cli_provider: bash
    template: _template/templates/default.html
    docroot: .
    docroot_tmp: ${TEMP-/tmp}/bert.docs
    curr_dir: $(pwd)
    header: _common/templates/header.html
    css: _common/templates/default.css
    watch_patterns: .*
    VERSION_STRING: 19.08.13.26
    vagrant_machine: default
    DELIM: _@DELIM@_
    interval: 1
    required_parameters:
      lab:
        --source|-s: [source,2] ## Additional Includes, e.g. some/markdown/file.md includes/* 
      --output|-o: output ## Output file, e.g. /some/output/file.html
      --template|-t: template ## Markdown template, e.g. /some/path/document.html
      loader:
        --lab-uri|-ur: LAB_URI ## Document URL
        --lab-uri-fallback|-urf: LAB_URI_FALLBACK ## Document Fallback
        --source|-s: [source] ## Additional Includes, e.g. some/markdown/file.md some/other/markdown/file2.md
    optional_parameters:
      --css|-c: css ## some/style.css
      --docroot|-r: docroot ## Override document root
      --header|-H: header ## Override header template
      --ppvars|-p: ppvars ## Specify extra pre-processor variables
      --vars|-V: vars ## Specify extra pandoc variables
      --metavars|-m: metavars ## Specify extra meta variables
      --watchdir|-wd: watchdir ## Specify the directory for monitoring changes
      --patterns|-wp: watch_patterns ## Specify pattern for watch mode, e.g. somefile1.md;somefile2.html;*.txt;*.md;*.js;*.etc
      --interval|-i: interval ## Specify interval for watch mode [t>0]
      --docroot-temp|-rt: docroot_tmp ## Override default path to which we clone bert.docs
      --no-aio: noaio ## Instruct pandoc to not build a self-contained document
      --dry: dry_run ## Dry Run, only echo the build command
      --watch: build_and_watch ## Invoke the 'build_and_watch' make-style function
      --skip-preflight: skip_preflight ## Skip preflight checks during build task
    help:
      message: |
        Build a self-contained interactive HTML document
      epilog:
      examples:
        - Build the self-contained interactive document: |
            tasks lab run -s 'lab1/vagrant-lab1.markdown' 'lab1/includes/*.md' -o lab1/vagrant-lab1.hta -r https://github.com/berttejeda/bert.docs.git -t lab1/templates/vagrant-lab1.html ---make build
        - Build the self-contained interactive document, and rebuild when any markdown files change: |
            tasks lab run -s 'lab1/vagrant-lab1.markdown' 'lab1/includes/*.md' -o lab1/vagrant-lab1.hta -r https://github.com/berttejeda/bert.docs.git -t lab1/templates/vagrant-lab1.html ---make build --watch --patterns '*.markdown;*.md'
        - Display the underlying pp/pandoc commands: |
            tasks lab run -s 'lab1/vagrant-lab1.markdown' 'lab1/includes/*.md' -o lab1/vagrant-lab1.hta -r https://github.com/berttejeda/bert.docs.git -t lab1/templates/vagrant-lab1.html ---make build --dry
        - Skip preflight checks: |
            tasks lab run -s 'lab1/vagrant-lab1.markdown' 'lab1/includes/*.md' -o lab1/vagrant-lab1.hta -r https://github.com/berttejeda/bert.docs.git -t lab1/templates/vagrant-lab1.html ---make build --skip-preflight
    functions:
      check_exe:
        shell: bash
        hidden: true
        source: |-
          echo Checking for ${1} ...
          if ! [[ ($(type /usr/{,local/}{,s}bin/${1} 2> /dev/null)) || ($(which ${1})) ]];then
            echo "This function requires ${1}, see installation instructions: ${2}"
            return 1
          fi      
      check_docroot:
        shell: bash
        help: Checks for proper document root
        hidden: true
        source: |-
          echo Checking for document root ...
          if [[ "$docroot" =~ ^http.*git ]];then
            echo "Looks like you've specified a git repo"
            if ! test -d ${docroot_tmp};then
              echo Attempting to clone ...
              git clone ${docroot} ${docroot_tmp}
              docroot=${docroot_tmp}
            else
              echo "Let's make sure the docroot is up to date"
              cd "${docroot_tmp}"
              git pull -s recursive -X theirs
              docroot=${docroot_tmp}
              cd "${curr_dir}"
            fi
          else
            echo "OK, proceeding ..."
          fi
      build_pp_vars:
        shell: bash
        help: Build Pre-Processor Vars
        hidden: true
        source: |-
          pp_commands="pp "
          if [[ -n $ppvars ]];then
              if [[ $ppvars =~ .*${DELIM}.* ]];then
                  ppvars=${ppvars//${DELIM}/ -D }
                  pp_commands+="-D ${ppvars: :-3} "
              else
                  pp_commands+="-D $ppvars "
              fi
          fi
          pp_commands+="-D VERSION_STRING=${VERSION_STRING} "
          pp_commands+="-D vagrant_machine=${vagrant_machine} "
          pp_commands+="${source} "
      build_pandoc_commands:
        shell: bash
        help: Derive pandoc commands for building lab document
        hidden: true
        source: |-
          output_file=${output-${source%.*}.html}
          pandoc_commands="pandoc "
          pandoc_commands+="-o ${output_file} "
          pandoc_commands+="-c ${docroot}/${css} "
          pandoc_commands+="-H ${docroot}/${header} "
          pandoc_commands+="--template ${template} "
          pandoc_commands+="-V VERSION_STRING=${VERSION_STRING} "
          if [[ $vars ]];then
              vars=${vars//${DELIM}/ -V }
              option='-V '
              pandoc_commands+="-V ${vars: :-${#option}} " # strip the trailing option
          fi
          pandoc_commands+="-V docroot=${docroot} "
          if [[ $metavars ]];then
              metavars=${metavars//${DELIM}/ --metadata }
              option="--metadata "
              pandoc_commands+="--metadata ${metavars: :-${#option}} " # strip the trailing option
          fi
          if [[ -z $noaio ]];then 
              pandoc_commands+="--self-contained "
              pandoc_commands+=" --standalone "
          fi
      build_pandoc_commands_loader:
        shell: bash
        help: Derive pandoc commands for building loader
        hidden: true
        source: |-
          echo Deriving pandoc commands for building the loader ...
          output_file=${output-${source%.*}.html}
          pandoc_commands="pandoc "
          pandoc_commands+="-o ${output_file} "
          pandoc_commands+="--template ${template} "
          pandoc_commands+="-V VERSION_STRING=${VERSION_STRING} "
          pandoc_commands+="-V LAB_URI=${LAB_URI} "
          pandoc_commands+="-V LAB_URI_FALLBACK=${LAB_URI_FALLBACK} "
          if [[ $vars ]];then
              vars=${vars//${DELIM}/ -V }
              option='-V '
              pandoc_commands+="-V ${vars: :-${#option}} " # strip the trailing option
          fi
          pandoc_commands+="-V docroot=${docroot} "
          if [[ $metavars ]];then
              metavars=${metavars//${DELIM}/ --metadata }
              option="--metadata "
              pandoc_commands+="--metadata ${metavars: :-${#option}} " # strip the trailing option
          fi
          if [[ -z $noaio ]];then 
              pandoc_commands+="--self-contained "
              pandoc_commands+=" --standalone "
          fi          
      build:
        shell: bash
        help: Build output file
        source: |-
          if [[ -z $skip_preflight ]];then
            if ! check_exe pandoc https://pandoc.org/installing.html;then
              return 1
            fi
            if ! check_exe pp https://github.com/CDSoft/pp#installation;then
              return 1
            fi        
          fi
          check_docroot
          build_pp_vars_loader
          build_pandoc_commands_loader
          if [[ -n $dry_run ]];then
            echo ${pp_commands} \| ${pandoc_commands}
            return
          fi         
          echo "Issuing build"
          if ${pp_commands} | ${pandoc_commands};then
              echo "Done. Output file is ${output_file}"
          else
              echo "Build failed."
              exit 1
          fi
      build_loader:
        shell: bash
        help: Build the HTA loader
        source: |-
          if [[ "$parameter_set" != "loader" ]];then
            echo You must invoke this tasks via the 'loader' parameter set
            return
          fi
          if [[ -z $skip_preflight ]];then
            if ! check_exe pandoc https://pandoc.org/installing.html;then
              return 1
            fi
          fi
          check_docroot
          build_pandoc_commands_loader
          if [[ -n $dry_run ]];then
            echo -e "echo | ${pandoc_commands}"
            return
          fi         
          echo "Issuing build"
          if echo | ${pandoc_commands};then
              echo "Done. Output file is ${output_file}"
          else
              echo "Build failed."
              exit 1
          fi          
      build_and_watch:
        shell: bash
        help: Build output file and watch for changes
        source: |-
          build
          echo "Watching for changes"
          watchmedo shell-command \
              --patterns="${watch_patterns-.*}" \
              --recursive \
              --command="tasks run -s lab1/vagrant-lab1.markdown -o lab1/vagrant-lab1.hta -r https://github.com/berttejeda/bert.docs.git -t lab1/templates/vagrant-lab1.html --skip-preflight ---make build"